# firmware_downloader.py
from packaging import version
import os
import requests
import zipfile

SERVER_URL = "https://tn.zitsky.com/flasher/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE3NjA1MzY1ODQsIm5hbWUiOiJQYXZlbFBvcnRhdGl2ZSJ9.xaJabSB73QsJBhjHb4jQT2VHJXtQ8NXz3EQ3I0M2l7I/firmwares"
DOWNLOAD_DIR = "firmware"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

def download_latest_firmware():
    try:

        response = requests.get(SERVER_URL)
        response.raise_for_status()
        data = response.json()

        firmwares = data.get("firmwares", [])
        if not firmwares:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—à–∏–≤–æ–∫")
            return []

        print("\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—à–∏–≤–∫–∏:")
        for fw in firmwares:
            print(f"  ‚Ä¢ –í–µ—Ä—Å–∏—è: {fw['version']}, –ì—Ä—É–ø–ø–∞: {fw['group']}, –î–∞—Ç–∞: {fw['created_at']}")

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É
        firmwares.sort(key=lambda x: version.parse(x["version"]))

        # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∏
        last_three = firmwares[-1:]
        saved_paths = []

        for fw in last_three:
            version_str = fw["version"]
            zip_url = fw["zip"]
            file_name = f"{version_str}.zip"
            local_path = os.path.join(DOWNLOAD_DIR, file_name)
            extract_dir = os.path.join(DOWNLOAD_DIR, version_str)

            # –µ—Å–ª–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if os.path.exists(extract_dir):
                print(f"‚ö† –ü–∞–ø–∫–∞ {extract_dir} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
                saved_paths.append(extract_dir)
                continue

            # —Å–∫–∞—á–∏–≤–∞–µ–º ZIP
            with requests.get(zip_url, stream=True) as r:
                r.raise_for_status()
                with open(local_path, "wb") as f:
                    for chunk in r.iter_content(chunk_size=8192):
                        f.write(chunk)

            print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {local_path}")

            # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
            os.makedirs(extract_dir, exist_ok=True)
            with zipfile.ZipFile(local_path, 'r') as zip_ref:
                zip_ref.extractall(extract_dir)

            print(f"üìÇ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ –≤: {extract_dir}")

            # —É–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
            os.remove(local_path)
            print(f"üóë –£–¥–∞–ª–µ–Ω–æ: {local_path}")

            saved_paths.append(extract_dir)

            cleanup_old_firmwares(DOWNLOAD_DIR, keep=3)

        return saved_paths

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def cleanup_old_firmwares(base_dir, keep):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—à–∏–≤–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 'keep' –≤–µ—Ä—Å–∏–∏."""
    folders = [f for f in os.listdir(base_dir) if os.path.isdir(os.path.join(base_dir, f))]
    if not folders:
        return

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –≤–µ—Ä—Å–∏–∏
    folders.sort(key=version.parse, reverse=True)

    # —Å—Ç–∞—Ä—ã–µ ‚Äî –≤—Å—ë, –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö 'keep'
    for old in folders[keep:]:
        path = os.path.join(base_dir, old)
        print(f"üóë –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–æ—à–∏–≤–∫—É: {old}")
        os.system(f"rm -rf '{path}'")
