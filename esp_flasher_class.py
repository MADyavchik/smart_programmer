# esp_flasher_class.py
import os
import subprocess
import logging
import re
import time
import RPi.GPIO as GPIO
import glob

logging.basicConfig(level=logging.INFO)

class ESPFlasher:
    def __init__(self, port="/dev/ttyS0", flash_dir="esp", boot_pin=24, en_pin=23):
        self.port = port
        self.flash_dir = flash_dir
        self.boot_pin = boot_pin
        self.en_pin = en_pin
        self.mac_address = None


        GPIO.setwarnings(False)   # –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        GPIO.setmode(GPIO.BCM)

        GPIO.setup(self.boot_pin, GPIO.OUT, initial=GPIO.HIGH)
        GPIO.setup(self.en_pin, GPIO.OUT, initial=GPIO.HIGH)

    # ===== Bootloader =====
    def enter_bootloader(self, boot_pin, en_pin):

        logging.info("üîå –ü–µ—Ä–µ–≤–æ–¥ ESP32 –≤ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∞...")
        GPIO.output(boot_pin, GPIO.LOW)
        time.sleep(0.15)
        GPIO.output(en_pin, GPIO.LOW)
        time.sleep(0.1)
        GPIO.output(en_pin, GPIO.HIGH)
        logging.info("ESP32 —Ç–µ–ø–µ—Ä—å –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.")

    def exit_bootloader(self, boot_pin, en_pin):

        logging.info("üõë –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞...")
        GPIO.output(boot_pin, GPIO.HIGH)
        time.sleep(0.1)
        GPIO.output(en_pin, GPIO.LOW)
        time.sleep(0.12)
        GPIO.output(en_pin, GPIO.HIGH)
        time.sleep(0.8)
        logging.info("ESP32 –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º.")

    # ===== –ß—Ç–µ–Ω–∏–µ MAC-–∞–¥—Ä–µ—Å–∞ =====
    def get_mac_address(self):
        try:
            self.enter_bootloader_func()
            result = subprocess.run(
                ["esptool.py", "--chip", "esp32", "-p", self.port, "read_mac"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                check=True
            )
            mac_line = next((line for line in result.stdout.splitlines() if "MAC:" in line), None)
            if mac_line:
                mac = mac_line.split("MAC:")[1].strip()
                self.mac_address = mac.lower()
                logging.info(f"‚úÖ MAC-–∞–¥—Ä–µ—Å: {self.mac_address}")
                self.exit_bootloader_func()
                return self.mac_address
            else:
                raise Exception("MAC-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MAC: {e}")
            self.exit_bootloader_func()
            return None

    # ===== –ü—Ä–æ—à–∏–≤–∫–∞ =====
    def flash_firmware(self, variant_file_path, on_stage=None, on_progress=None):
        """
        variant_file_path: –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        /root/smart_programmer/firmware/2.0.47/battery_sw_a_0x9000.bin
        """
        version_folder = os.path.dirname(variant_file_path)  # /root/.../2.0.47
        variant_name = os.path.basename(variant_file_path)   # battery_sw_a_0x9000.bin
        base_name = variant_name.split("_0x9000")[0]        # battery_sw_a

        if not os.path.exists(version_folder):
            logging.error(f"‚ùå –ü–∞–ø–∫–∞ —Å –ø—Ä–æ—à–∏–≤–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {version_folder}")
            return False

        # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º
        bootloader = self.catch_name(version_folder, "_0x1000.bin")
        firmware = self.catch_name(version_folder, "_0x10000.bin")
        partitions = self.catch_name(version_folder, "_0x8000.bin")
        ota = self.catch_name(version_folder, "_0xe000.bin")
        nvs = self.catch_name(version_folder, f"{base_name}_0x9000.bin")  # <-- –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª NVS

        for file in [bootloader, firmware, partitions, ota, nvs]:
            if not file or not os.path.exists(file):
                logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
                return False

        try:
            logging.info("üîå –í—Ö–æ–¥–∏–º –≤ bootloader...")

            self.enter_bootloader(self.boot_pin, self.en_pin)
            if on_stage: on_stage("Enter Bootloader")
            if on_progress: on_progress(0)

            logging.info("üîå –ü—Ä–æ–∂–∏–≥–∞–µ–º —Ñ—å—é–∑—ã...")
            subprocess.run([
                "espefuse.py", "--chip", "esp32", "-p", self.port, "--do-not-confirm", "set_flash_voltage", "3.3V"
            ], check=True)
            if on_stage: on_stage("Burn fuses")
            if on_progress: on_progress(5)

            logging.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–ª–µ—à–∞...")
            if on_stage: on_stage("Erase Flash")
            if on_progress: on_progress(10)
            subprocess.run(
                ["esptool.py", "--chip", "esp32", "-b", "460800", "-p", self.port, "erase_flash"],
                check=True
            )


            logging.info("üîå –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—Ö–æ–¥–∏–º –≤ bootloader...")
            self.enter_bootloader(self.boot_pin, self.en_pin)


            logging.info("üì¶ –ü—Ä–æ—à–∏–≤–∫–∞...")
            if on_stage: on_stage("Flash...")
            if on_progress: on_progress(15)

            flash_args = [
                "python3", "-u", "esptool.py", "--chip", "esp32", "-b", "460800", "-p", self.port,
                "write_flash", "--flash_mode", "dio", "--flash_freq", "40m", "--flash_size", "4MB",
                "0x1000", bootloader,
                "0x10000", firmware,
                "0x8000", partitions,
                "0xe000", ota,
                "0x9000", nvs
            ]

            start_percent = 15    # –Ω–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞ Flash Firmware –Ω–∞ –æ–±—â–µ–π —à–∫–∞–ª–µ
            stage_range = 85      # —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∑–∞–Ω–∏–º–∞–µ—Ç —ç—Ç–∞–ø

            #proc = subprocess.Popen(flash_args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)
            proc = subprocess.Popen(
                flash_args,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,   # –∏–ª–∏ universal_newlines=True, –Ω–æ text=True –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ
                bufsize=1    # line-buffered
            )

            for line in proc.stdout:
                line = line.strip()
                print(line)
                # –ª–æ–≤–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ esptool
                m = re.search(r"\[\=+\s*\>\s*\]*\s+(\d+\.\d+)%", line)
                if m and on_progress:
                    firmware_percent = float(m.group(1))
                    total_percent = start_percent + firmware_percent / 100 * stage_range
                    on_progress(total_percent)

            proc.wait()

            logging.info("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            if on_stage: on_stage("Done")
            if on_progress: on_progress(100)

            self.exit_bootloader(self.boot_pin, self.en_pin)
            return True

        except subprocess.CalledProcessError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏: {e}")
            self.exit_bootloader(self.boot_pin, self.en_pin)
            return False

    # ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====

    def catch_name(self, path, suffix):

        matches = glob.glob(os.path.join(path, f"*{suffix}"))
        if matches:
            file = matches[0]  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
            print(f"–ù–∞–π–¥–µ–Ω NVS-—Ñ–∞–π–ª: {file}")
            return file

        else:
            print(f"–§–∞–π–ª —Å –æ–∫–æ–Ω—á–∞–Ω–∏–µ–º {suffix} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False



