import time
import subprocess
import board
import busio
import adafruit_ads1x15.ads1115 as ADS
from adafruit_ads1x15.analog_in import AnalogIn
import RPi.GPIO as GPIO


# ==================== BATTERY MONITOR ==================== #
class BatteryMonitor:
    def __init__(self, channel=ADS.P0, multiplier=2.0, charge_pin=21):
        """
        channel: –≤—Ö–æ–¥ ADS1115 (ADS.P0..P3)
        multiplier: –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ (–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è)
        charge_pin: GPIO, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞–ª–∏—á–∏–µ –∑–∞—Ä—è–¥–∫–∏ (1 ‚Äî –∑–∞—Ä—è–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
        """
        i2c = busio.I2C(board.SCL, board.SDA)
        self.ads = ADS.ADS1115(i2c)
        self.chan = AnalogIn(self.ads, channel)
        self.multiplier = multiplier
        self.charge_pin = charge_pin

        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.charge_pin, GPIO.IN)

    def get_voltage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ (–≤ –í–æ–ª—å—Ç–∞—Ö)"""
        return round(self.chan.voltage * self.multiplier, 3)

    def is_charging(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∑–∞—Ä—è–¥–∫–∞"""
        try:
            return GPIO.input(self.charge_pin) == GPIO.HIGH
        except Exception:
            return False

    def get_status_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–∞—Ç–∞—Ä–µ–∏"""
        voltage = self.get_voltage()
        charging = self.is_charging()
        if charging:
            return f"üîå {voltage:.2f} V (–∑–∞—Ä—è–¥–∫–∞)"
        else:
            return f"üîã {voltage:.2f} V"


# ==================== WIFI MONITOR ==================== #
class WifiMonitor:
    def __init__(self, interface="wlan0", cache_time=10.0):
        self.interface = interface
        self.cache_time = cache_time
        self._last_update = 0
        self._cached_rssi = None
        self._cached_quality = None
        self._cached_ssid = None

    def get_quality_percent(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ (0‚Äì100 %)"""
        self._update_data()
        return self._cached_quality

    def get_signal_level(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ (RSSI, dBm)"""
        self._update_data()
        return self._cached_rssi

    def get_ssid(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç SSID —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏"""
        self._update_data()
        return self._cached_ssid

    def _update_data(self):
        now = time.time()
        if now - self._last_update < self.cache_time:
            return

        try:
            # –ß–∏—Ç–∞–µ–º RSSI –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ /proc/net/wireless
            with open("/proc/net/wireless", "r") as f:
                for line in f:
                    if self.interface in line:
                        parts = line.split()
                        quality = float(parts[2].replace(".", ""))
                        rssi = int(float(parts[3]))
                        self._cached_quality = int(quality / 70 * 100)
                        self._cached_rssi = rssi
                        break

            # –ü–æ–ª—É—á–∞–µ–º SSID
            result = subprocess.run(
                ["iwgetid", "-r", self.interface],
                capture_output=True,
                text=True
            )
            self._cached_ssid = result.stdout.strip() or "‚Äî"

        except Exception:
            self._cached_quality = None
            self._cached_rssi = None
            self._cached_ssid = None

        self._last_update = now

    def get_status_text(self):
        self._update_data()
        if self._cached_quality is None:
            return "üì∂ WiFi: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        return f"üì∂ WiFi: {self._cached_ssid} ({self._cached_rssi} dBm)"


# ==================== DEMO ==================== #
if __name__ == "__main__":
    batt = BatteryMonitor()
    wifi = WifiMonitor()

    try:
        while True:
            print(batt.get_status_text())
            print(wifi.get_status_text())
            print("-" * 30)
            time.sleep(2)
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥.")
