import time
import subprocess
import board
import busio
import adafruit_ads1x15.ads1115 as ADS
from adafruit_ads1x15.analog_in import AnalogIn
import RPi.GPIO as GPIO


# ==================== BATTERY MONITOR ==================== #
class BatteryMonitor:
    def __init__(self, channel=ADS.P0, multiplier=2.0, charge_pin=21):
        """
        channel: –≤—Ö–æ–¥ ADS1115 (ADS.P0..P3)
        multiplier: –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ (–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è)
        charge_pin: GPIO, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞–ª–∏—á–∏–µ –∑–∞—Ä—è–¥–∫–∏ (1 ‚Äî –∑–∞—Ä—è–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
        """
        i2c = busio.I2C(board.SCL, board.SDA)
        self.ads = ADS.ADS1115(i2c)
        self.chan = AnalogIn(self.ads, channel)
        self.multiplier = multiplier
        self.charge_pin = charge_pin

        GPIO.setwarnings(False)
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.charge_pin, GPIO.IN)

    def get_voltage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ (–≤ –í–æ–ª—å—Ç–∞—Ö)"""
        return round(self.chan.voltage * self.multiplier, 3)

    def is_charging(self) -> bool:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∑–∞—Ä—è–¥–∫–∞"""
        try:
            return GPIO.input(self.charge_pin) == GPIO.HIGH
        except Exception:
            return False

    def get_status_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–∞—Ç–∞—Ä–µ–∏"""
        voltage = self.get_voltage()
        charging = self.is_charging()
        if charging:
            return f"üîå {voltage:.2f} V (–∑–∞—Ä—è–¥–∫–∞)"
        else:
            return f"üîã {voltage:.2f} V"


# ==================== WIFI MONITOR ==================== #
class WifiMonitor:
    def __init__(self, interface="wlan0", cache_time=2.0):
        """
        interface: –∏–º—è WiFi-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        cache_time: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (—Å–µ–∫)
        """
        self.interface = interface
        self.cache_time = cache_time
        self._last_update = 0
        self._cached_rssi = None
        self._cached_quality = None

    def _update_data(self):
        """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ WiFi —á–µ—Ä–µ–∑ iwconfig, –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª"""
        now = time.time()
        if now - self._last_update < self.cache_time:
            return  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à

        try:
            result = subprocess.run(
                ["iwconfig", self.interface],
                capture_output=True,
                text=True
            )
            rssi, quality = None, None
            for line in result.stdout.splitlines():
                if "Link Quality" in line:
                    parts = line.split()
                    for part in parts:
                        if "Quality=" in part or "Link" in part:
                            qstr = part.split("=")[-1]
                            if "/" in qstr:
                                num, denom = qstr.split("/")
                                quality = int(int(num) / int(denom) * 100)
                        elif "level=" in part:
                            try:
                                rssi = int(part.split("=")[1].replace("dBm", ""))
                            except:
                                pass
            self._cached_rssi = rssi
            self._cached_quality = quality
            self._last_update = now
        except Exception:
            self._cached_rssi = None
            self._cached_quality = None

    def get_signal_level(self) -> int | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ WiFi (RSSI, dBm)"""
        self._update_data()
        return self._cached_rssi

    def get_quality_percent(self) -> int | None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ (0‚Äì100 %)"""
        self._update_data()
        return self._cached_quality

    def get_status_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ WiFi"""
        self._update_data()
        if self._cached_quality is None:
            return "üì∂ WiFi: –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        return f"üì∂ WiFi: {self._cached_quality}% ({self._cached_rssi} dBm)"


# ==================== DEMO ==================== #
if __name__ == "__main__":
    batt = BatteryMonitor()
    wifi = WifiMonitor()

    try:
        while True:
            print(batt.get_status_text())
            print(wifi.get_status_text())
            print("-" * 30)
            time.sleep(2)
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥.")
